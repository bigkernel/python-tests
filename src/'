#!/usr/bin/env python

import sys

def IsVersion2_x():
    current_version = sys.version_info
    return current_version.major == 3;

# Integer Type Method:

v0 = 2
v1 = -2

# int.bit_length()
# Return the number of bit necessary to represent an integer in binary,
# Excluding the sign and leading zeros.
print(v0.bit_length())
print(v1.bit_length())

# int.to_bytes(length, byteorder = "little" | "big", signed = True | False)
# Return an array of bytes representing an integer.
print(v0.to_bytes(4, "big", signed = False))
print(v0.to_bytes(4, "little", signed = False))
print(v1.to_bytes(4, "big", signed = True))
print(v1.to_bytes(4, "little", signed = True))

# int.from_bytes(bytes, byteorder = "little" | "big", signed = True | False)
# Return an integer represented by an array of bytes.
v2 = int.from_bytes(b'\x0f\x00', "little", signed = False)
print('v2 = {0}'.format(v2))

# Float Type Method:
v0 = -2.0
v1 = 3.2

# float.as_integer_ratio()
# Return a pair of integers whose ratio is exactly equal to the original
# float and with a positive denominator raises OverflowError on infinities
# and ValueError on NaNs.
def AsIntegerRatio(v):
    if (v.as_integer_ratio()):
        print('{} as integer ratio'.format(v))
    else:
        print('{} as not integer ratio'.format(v))

AsIntegerRatio(v0)
AsIntegerRatio(v1)
